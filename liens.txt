https://medium.com/@max.difranco/user-registration-and-jwt-authentication-with-spring-boot-3-part-3-refresh-token-logout-ea0704f1b436

Maintenant il faut voir comment je gère le refresh sur le front end.
https://angular.fr/technical/auth-with-http-only
BACKEND : remove refreshtoken :
----------------------------------------------------------------------------------------------------
	refreshTokenService.deleteRefreshToken(token);

        // Clear HttpOnly cookie
        Cookie cookie = new Cookie("refreshToken", null);
        cookie.setHttpOnly(true);
        cookie.setSecure(true);
        cookie.setPath("/");
        cookie.setMaxAge(0);


Auto refresh token and set api method :
----------------------------------------------------------------------------------------------------
import axios from "axios";

const api = axios.create({
    baseURL: "http://localhost:8080/api",
    withCredentials: true // Ensures cookies are sent
});

// Attach token to requests
api.interceptors.request.use(config => {
    config.headers["Authorization"] = `Bearer ${localStorage.getItem("accessToken")}`;
    return config;
});

// Handle expired tokens automatically
api.interceptors.response.use(
    response => response,
    async (error) => {
        if (error.response.status === 401) { // Token expired
            try {
                const newToken = await refreshAccessToken();
                localStorage.setItem("accessToken", newToken);
                error.config.headers["Authorization"] = `Bearer ${newToken}`;
                return axios(error.config); // Retry failed request
            } catch (refreshError) {
                console.error("Session expired, please login again");
            }
        }
        return Promise.reject(error);
    }
);



refreshtoken expire redirection to login
----------------------------------------------------------------------------------------------------
async function refreshAccessToken() {
    try {
        const response = await axios.post("http://localhost:8080/api/auth/refresh-token", {}, { withCredentials: true });
        return response.data.accessToken; // Return new access token
    } catch (error) {
        console.error("Session expired, redirecting to login...");
        localStorage.removeItem("accessToken"); // Clear token
        window.location.href = "/login"; // Redirect to login page
        throw error;
    }
}


use the method to do post requests
----------------------------------------------------------------------------------------------------
async function createPost(title, content) {
    try {
        const response = await api.post("/posts", {
            title: title,
            content: content
        });
        console.log("Post created:", response.data);
    } catch (error) {
        console.error("Error creating post:", error);
    }
}


use the method to do get requests
----------------------------------------------------------------------------------------------------
async function fetchUserProfile() {
    try {
        const response = await api.get("/user/profile"); // API request
        console.log("User Profile:", response.data);
    } catch (error) {
        console.error("Error fetching profile:", error);
    }
}

// Call the function
fetchUserProfile();


logout
-----------------------------------------------------------------------------------------------------
async function logout() {
    try {
        // 1️⃣ Send logout request to backend (this clears the refresh token)
        await api.post("/auth/logout");

        // 2️⃣ Remove access token from localStorage
        localStorage.removeItem("accessToken");

        // 3️⃣ Redirect user to login page
        window.location.href = "/login";
    } catch (error) {
        console.error("Error during logout:", error);
    }
}
